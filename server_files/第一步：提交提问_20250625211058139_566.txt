import asyncio
import time
import numpy as np
import requests
from collections import deque
from bleak import BleakScanner, BleakClient
from bleak.backends.characteristic import BleakGATTCharacteristic

from predict_stress import predict_stress_level  # 你的压力预测函数

# --- 配置 ---
TARGET_DEVICE_NAME = "HUAWEI"
TARGET_DEVICE_ADDRESS = None

HEART_RATE_SERVICE_UUID = "0000180d-0000-1000-8000-00805f9b34fb"
HEART_RATE_MEASUREMENT_CHAR_UUID = "00002a37-0000-1000-8000-00805f9b34fb"

HRV_WINDOW_SECONDS = 60
HRV_MIN_WINDOW = 5

BASELINE_ENDPOINT = "http://172.16.2.59:5000/baseline_phy_signal/store"
PRESSURE_ENDPOINT = "http://172.16.2.59:5000/store_pressure"

# 模拟设备 MAC 地址
mac_address_str = "00:00:00:00:00:00"
bpm_history = deque()
last_hrv_output_time = 0

# 控制变量（在小程序点击“测量基线”按钮时改为 True）
is_baseline_phase = True

# --- 工具函数 ---

def estimate_pseudo_hrv():
    """根据 BPM 序列估算伪 HRV（标准差）"""
    if len(bpm_history) < HRV_MIN_WINDOW:
        return None
    bpm_values = [b for (_, b) in bpm_history]
    return np.std(bpm_values)

def post_stress_level_to_backend(stress_level: int, mac_address: str):
    """将压力分级通过 POST 发送到后端"""
    try:
        payload = {
            "pressure_value": stress_level,
            "device_mac_address": mac_address
        }
        response = requests.post(PRESSURE_ENDPOINT, json=payload, timeout=3)
        if response.status_code == 200:
            print(" 成功发送压力等级到后端。")
        else:
            print(f" 后端返回状态码 {response.status_code}：{response.text}")
    except Exception as e:
        print(f" 发送压力等级失败: {e}")

def post_baseline_data(mac_address: str, heart_rate: str, blood_pressure: str,
                       skin_conductance: str, skin_temperature: str):
    """发送基线数据到后端"""
    try:
        payload = {
            "device_mac_address": mac_address,
            "Heart rate": heart_rate,
            "Blood pressure": "120/80",
            "skin conductance": "5.3",
            "skin temperature": "36.5"
        }
        response = requests.post(BASELINE_ENDPOINT, json=payload, timeout=3)
        if response.status_code == 200:
            print(" 成功发送基线数据到后端。")
        else:
            print(f" 基线接口返回状态码 {response.status_code}：{response.text}")
    except Exception as e:
        print(f" 基线数据发送失败: {e}")

# --- 心率通知回调 ---

def handle_heart_rate_notification(sender: BleakGATTCharacteristic, data: bytearray):
    global last_hrv_output_time

    flags = data[0]
    hr_format_bit = flags & 0x01
    heart_rate = int.from_bytes(data[1:3], 'little') if hr_format_bit else data[1]
    now = time.time()
    bpm_history.append((now, heart_rate))
    while bpm_history and now - bpm_history[0][0] > HRV_WINDOW_SECONDS:
        bpm_history.popleft()

    print(f" Heart Rate: {heart_rate} bpm")

    if is_baseline_phase:
        # 模拟数据（请替换为真实采集值）
        blood_pressure = "120/80"
        skin_conductance = "5.3"
        skin_temperature = "36.5"
        post_baseline_data(mac_address_str, str(heart_rate), blood_pressure, skin_conductance, skin_temperature)
    else:
        if now - last_hrv_output_time >= 10:
            pseudo_hrv = estimate_pseudo_hrv()
            if pseudo_hrv is not None:
                stress_level = predict_stress_level(pseudo_hrv)
                print(f" Pseudo HRV (STD over {HRV_WINDOW_SECONDS}s): {pseudo_hrv:.2f}")
                print(f" Predicted Stress Level: {stress_level}")
                post_stress_level_to_backend(stress_level, mac_address_str)
            last_hrv_output_time = now

# --- 主函数 ---

async def main():
    global mac_address_str
    print(" Scanning for devices...")
    devices = await BleakScanner.discover()

    target_device = None
    for device in devices:
        print(f"  Found: {device.name} ({device.address})")
        if TARGET_DEVICE_ADDRESS and device.address.lower() == TARGET_DEVICE_ADDRESS.lower():
            target_device = device
            break
        elif not TARGET_DEVICE_ADDRESS and TARGET_DEVICE_NAME.lower() in (device.name or "").lower():
            target_device = device
            break

    if not target_device:
        return jsonify(Data(code="404", msg="目标设备未找到，请检查名称或蓝牙状态。").__dict__), 200


    mac_address_str = target_device.address
    print(f" Connecting to {target_device.name} ({mac_address_str})...")

    async with BleakClient(target_device.address) as client:
        if client.is_connected:
            return jsonify(Data(code="200", msg="已连接设备！开始监听心率数据。").__dict__), 200
            try:
                await client.start_notify(HEART_RATE_MEASUREMENT_CHAR_UUID, handle_heart_rate_notification)
                return jsonify(Data(code="202", msg="正在监听心率通知...（按 Ctrl+C 停止）").__dict__), 200
                while True:
                    await asyncio.sleep(1)
            except Exception as e:
                return jsonify(Data(code="500", msg="监听错误: {e}").__dict__), 200
            finally:
                await client.stop_notify(HEART_RATE_MEASUREMENT_CHAR_UUID)
        else:
            return jsonify(Data(code="500", msg="连接失败。").__dict__), 200

# --- 启动入口 ---
import asyncio
async def start_monitor():
    await main()
 

