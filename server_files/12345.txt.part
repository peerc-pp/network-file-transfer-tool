

int sensor(void)
{   float blue;
	float red;
	float green;
	int sval;
	//float max;
	//测红光返回的电压值
	GPIO_ResetBits(GPIOA,GPIO_Pin_1);
	delay_nms(50);
	red=(float) ADC_ConvertedValue/4096.0*3.3;
	printf("\r\n red The current AD value = %f V \r\n",red); 
	GPIO_SetBits(GPIOA,GPIO_Pin_1);
	//测蓝光返回的电压值
	GPIO_ResetBits(GPIOA,GPIO_Pin_3);
	delay_nms(50);	  
	blue=(float) ADC_ConvertedValue/4096.0*3.3;
	printf("\r\n blue The current AD value = %f V \r\n",blue); 
	GPIO_SetBits(GPIOA,GPIO_Pin_3);
	//测绿光返回的电压值
	GPIO_ResetBits(GPIOA,GPIO_Pin_2);
	delay_nms(50);	  
	green =(float) ADC_ConvertedValue/4096.0*3.3;
	printf("\r\n green The current AD value = %f V \r\n",green); 
	GPIO_SetBits(GPIOA,GPIO_Pin_2);	 
	if (red >1.3 && red < 1.5 && blue<1.3 && blue > 1.5 && green <1.4&&green > 1.6){
	  //红色       
		sval= 2;	  }
	
    else if (red >1.2&&red < 1.5 && blue < 1.5&&blue > 1.3 && green > 1.2&&green < 1.4){
	//绿色       
		sval= 3;	 }
    else if( red >1.7&&red < 1.9 && blue >1.4 && blue < 1.6 && green >1.5 && green < 1.7){
       	 //蓝色
		sval=1;	  }	
		/*	 
	else if( &&red < 1.3&& blue < 1.2 && green < 1.1)
	{	   //白色
	sval=5;
	}  				  */ 
		/*
    else if (red > 1.3 && blue > 1.3 && green > 1.1){
	//棕色        
		sval= 4;					   }	  */
    else{     
		sval=5;		 }
	printf("\r\n the current return %d \r\n ",sval);
	return sval;
}
	
/********************************************
*函数名：int judge(void)
*函数功能：用于通过读入sensor函数返回的值来，通过某个颜色出现的次数来判断识别的颜色
*函数参数说明：void
*函数返回值：1-blue 2-red 3-green 0-不能判断
*******************************************/
   
int judge(void)
{
	int cur; //保存当前获取的颜色 1-blue 2-red 3-green
	int jblue=0;
	int jred=0;
	int jgreen=0;
	int jbrown=0;
	int jwhite=0;
	int jval;
	int jmax=0;
	int i;
	for(i=0;i<5;i++)
	{
		cur=sensor();								    
		switch(cur)
		{
			case 1 :
			jblue++;
			break;
			case 2 :
			jred++;
			break;
			case 3 :
			jgreen++;
			break  ;
			case 4:
			jbrown++;	
			break;	
			case 5:
			jwhite++;
			break;	
			default :
			printf("\r\n wrong return \r\n");
			break;
		}
	}
	jmax=jblue;
	jval=1;
	if(jmax<jred) 
	{
		jmax=jred;
		jval=2;
	}
	if(jmax<jgreen)  
	{
		jmax=jgreen;
		jval=3;
	}
	if(jmax<jbrown)
	{		
	jmax=jbrown;
	jval=4;
	}
	if(jmax<jwhite)
	{jmax=jwhite;
	jval=5;
	}

	return jval;
}


int main(void)
{
	int val,i,j,last;
	Open_Init();
// ADC 初始化
	ADC1_Init();
	printf("\r\n ----这是一个ADC实验(DMA传输)-颜色识别---\r\n");
	while (1)
	{	val=judge();
		//val=sensor();  //不取平均
		printf("\r\n the current return %d \r\n ",val);
		last=2;//上一次为
		switch(val)
		{
		    case 1 :	
			printf("\r\n main blue \r\n");
			/*
			if(last==1)
			{//直行
			    for(i=1;i<=50;i++){		//直行			  直行
		        car_left(200);
		        car_right(175);	
				    
		        } 
			}	
			else{	   //掉头
			    for(i=1 ;i<=5;i++)			 //恢复车头 旋转1/2圈		起步				  60	50
		        {
			        car_left(200);	  //50
			        car_right(175);
		        }
			    for(i=1 ;i<=120;i++)			 //恢复车头 旋转1/2圈	转弯		//90			  60	50
		        {
			        car_left(30);	  //50		10
			        car_right(1200);		   //350 600
		        }
			    for(i=1;i<=50;i++){		//直行			  直行
		            car_left(200);
		            car_right(175);	    
		        } 	   
			    last=1;
			}		*/
			//临时
			last=1;	
			break;
			case 2 :  
			printf(" \r\n  main red \r\n");	    
			/*
			
			if(last==3)
			{ continue;//
			}
			else{	   
				for(i=1;i<=50;i++){	vv	//直行	    m
		        car_left(200);
		        car_right(175);	    
		        }
				last=2;
			}	*/
			//临时		 
			last=2;
			break;
			case 3 :	 //掉头

			printf("\r\n main green \r\n");
			/*
			//直行
			if(testRight()==1)
		{ 	Forward(10,200);
		}
		else{

			for(j=1 ;j<=40;j++)			 //快速恢复车头 旋转1/4圈	尚未验证  134	   60	50	   	40
			{
				car_left(10);			 //50
				car_right(200);
			}//左转

			if(testRight()!=1)
			{ 
			 	for(j=1 ;j<=80;j++)			 //快速恢复车头 旋转1/2圈	尚未验证  134	   60	50	   	40
				{
					car_left(10);			 //50
					car_right(200);
				}//直接转180度

				if(testRight()!=1){
					for(j=1 ;j<=40;j++)			 //快速恢复车头 旋转1/2圈	尚未验证  134	   60	50	   	40
					{
						car_left(200);			 //50
						car_right(10);
					}//右转90度
				}
				else{
				  	Forward(50,200);
					for(j=1 ;j<=40;j++)			 //快速恢复车头 旋转1/2圈	尚未验证  134	   60	50	   	40
						{
							car_left(10);			 //50
							car_right(200);
						}//左转90度
				}
			}
			else{//没有障碍正常转
				Forward(50,200);
				for(j=1 ;j<=40;j++)			 //快速恢复车头 旋转1/2圈	尚未验证  134	   60	50	   	40
					{
						car_left(200);			 //50
						car_right(10);
					}//右转90度
			    Forward(50,200);
				

			}
			
		}
		 */



			/*	  旧
			for(i=1 ;i<=5;i++)			 //恢复车头 旋转1/2圈		起步				  60	50
		    {
			car_left(200);	  //50
			car_right(175);
		   }
			for(i=1 ;i<=120;i++)			 //恢复车头 旋转1/2圈	转弯		//90			  60	50
		    {
			car_left(30);	  //50		10
			car_right(1200);		   //350 600
		   }
			for(i=1;i<=50;i++){		//直行			  直行
		    car_left(200);
		    car_right(175);	    
		    } 	   */
			last=3;
			break;
			case 4:
			printf("\r\n main brown \r\n");
			/*
			for(i=1;i<=400;i++){		//自转
		    car_left(20);
		    car_right(500);	    
		    } 	
			break;
			case 5:
			printf("\r\n main white \r\n");
			//右转
			for(j=1 ;j<=40;j++)			 //快速恢复车头 旋转1/2圈	尚未验证  134	   60	50	   	40
					{
						car_left(200);			 //50
						car_right(10);
					}//右转90度
			last=5;
			break;			
			default :
			printf("\r\n  main can't judge color \r\n");		   */
			break;
		}
	}
}

		
